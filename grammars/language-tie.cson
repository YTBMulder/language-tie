scopeName: 'source.tie'
fileTypes: [ 'tie' ]
name: 'TIE'

patterns: [
    {
        include: '#comments'
    }
    {
        include: '#c_function_call'
    }
    {
        include: '#strings'
    }
    {
        comment: 'Highlighting of storage types'
        match: '\\b(assign|coprocessor|cstub_swap|ctype|def|field|length|lookup|iclass|imap|immediate_range|import_wire|in|inout|instruction_group|interface|format|function|opcode|operand|operand_map|operation|operator|out|property|proto|queue|reference|regbypass|regfile|regport|schedule|semantic|shared|slot|slot_opcodes|state|table|TIEprint|use|user_register|wire|xfer_proto)\\b'
        name: 'storage.type.tie'
    }
    {
        comment: 'Highlighting of numeric types'
        match: "\\b((([1-9]*)'b(0|1)*)|(([1-9]*)'d[0-9]*)|(?i)(([1-9]\\d*)'h[0-9a-f]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(?i)(l|ul|u|f|ll|ull)?\\b"
        name: 'constant.numeric.tie'
    }
    {
        comment: 'Highlighting of embedded PERL code'
        begin: '^;'
        end: '$'
        name: 'meta.embedded.perl'
        patterns: [
            {
                include: 'source.perl'
            }
        ]
    }
]

repository:
    comments:
        patterns: [
            {
                captures:
                    1:
                        name: 'meta.toc-list.banner.block.tie'
                match: '^/\\* =(\\s*.*?)\\s*= \\*/$\\n?'
                name: 'comment.block.tie'
            }
            {
                begin: '\\/\\*'
                beginCaptures:
                    0:
                        name: 'punctuation.definition.comment.begin.tie'
                end: '\\*\\/'
                endCaptures:
                    0:
                        name: 'punctuation.definition.comment.end.tie'
                name: 'comment.block.tie'
            }
            {
                match: '\\*/.*\\n'
                name: 'invalid.illegal.stray-comment-end.tie'
            }
            {
                captures:
                    1:
                        name: 'meta.toc-list.banner.line.tie'
                match: '^// =(\\s*.*?)\\s*=\\s*$\\n?'
                name: 'comment.line.banner.tie'
            }
            {
                begin: '(^[ \\t]+)?(?=//)'
                beginCaptures:
                    1:
                        name: 'punctuation.whitespace.comment.leading.tie'
                end: '(?!\\G)'
                patterns: [
                    {
                        begin: '//'
                        beginCaptures:
                            0:
                                name: 'punctuation.definition.comment.tie'
                        end: '\\n'
                        name: 'comment.line.double-slash.tie'
                        patterns: [
                            {
                                include: '#line_continuation_character'
                            }
                        ]
                    }
                ]
            }
        ]
    line_continuation_character:
        patterns: [
            {
                match: '(\\\\)\\s*\\n'
                captures:
                    1:
                        name: 'constant.character.escape.line-continuation.tie'
            }
        ]
    c_function_call:
        captures:
            1:
                name: 'punctuation.whitespace.function-call.leading.tie'
            2:
                name: 'support.function.any-method.tie'
            4:
                name: 'punctuation.definition.parameters.tie'
        match: '(?x) (?: (?= \\s )  (?:(?<=else|new|return) | (?<!\\w)) (\\s+))?\n\t\t\t(\\b \n\t\t\t\t(?!(while|for|do|if|else|switch|catch|enumerate|return|sizeof|[cr]?iterate)\\s*\\()(?:(?!NS)[A-Za-z_][A-Za-z0-9_]*+\\b | :: )++                  # actual name\n\t\t\t)\n\t\t\t \\s*(\\()'
        name: 'meta.function-call.tie'
    strings:
        patterns: [
            {
                begin: '"'
                beginCaptures:
                    0:
                        name: 'punctuation.definition.string.begin.tie'
                end: '"'
                endCaptures:
                    0:
                        name: 'punctuation.definition.string.end.tie'
                name: 'string.quoted.double.tie'
                patterns: [
                    {
                        include: '#string_escaped_char'
                    }
                    {
                        include: '#string_placeholder'
                    }
                    {
                        include: '#line_continuation_character'
                    }
                ]
            }
            {
                begin: '\''
                beginCaptures:
                    0:
                        name: 'punctuation.definition.string.begin.tie'
                end: '\''
                endCaptures:
                    0:
                        name: 'punctuation.definition.string.end.tie'
                name: 'string.quoted.single.tie'
                patterns: [
                    {
                        include: '#string_escaped_char'
                    }
                    {
                        include: '#line_continuation_character'
                    }
                ]
            }
        ]
    string_escaped_char:
        patterns: [
            {
                match: '\\\\(\\\\|[abefnprtv\'"?]|[0-3]\\d{,2}|[4-7]\\d?|x[a-fA-F0-9]{,2}|u[a-fA-F0-9]{,4}|U[a-fA-F0-9]{,8})'
                name: 'constant.character.escape.tie'
            }
            {
                match: '\\\\.'
                name: 'invalid.illegal.unknown-escape.tie'
            }
        ]
    string_placeholder:
        patterns: [
            {
                match: '(?x)%\n    \t\t\t\t\t\t(\\d+\\$)?                             # field (argument #)\n    \t\t\t\t\t\t[#0\\- +\']*                           # flags\n    \t\t\t\t\t\t[,;:_]?                              # separator character (AltiVec)\n    \t\t\t\t\t\t((-?\\d+)|\\*(-?\\d+\\$)?)?              # minimum field width\n    \t\t\t\t\t\t(\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)?         # precision\n    \t\t\t\t\t\t(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier\n    \t\t\t\t\t\t[diouxXDOUeEfFgGaACcSspn%]           # conversion type\n    \t\t\t\t\t'
                name: 'constant.other.placeholder.tie'
            }
            {
                match: '%'
                name: 'invalid.illegal.placeholder.tie'
            }
        ]
