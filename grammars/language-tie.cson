scopeName: 'source.tie'
fileTypes: [ 'tie' ]
name: 'TIE'

patterns: [
    {
        include: '#comments'
    }
    {
        comment: 'Highlighting storage types'
        match: '\\b(assign|immediate_range|in|inout|function|operation|out|regfile|semantic|state|table|wire)\\b'
        name: 'storage.type.tie'
    }
    {
        comment: 'Highlighting numbers'
        match: '\\b((0(x|X)[0-9a-fA-F]*)|(0(b|B)[01]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b'
        name: 'constant.numeric.tie'
    }
]

repository:
    comments:
        patterns: [
            {
                captures:
                    1:
                        name: 'meta.toc-list.banner.block.tie'
                match: '^/\\* =(\\s*.*?)\\s*= \\*/$\\n?'
                name: 'comment.block.tie'
            }
            {
                begin: '\\/\\*'
                beginCaptures:
                    0:
                        name: 'punctuation.definition.comment.begin.tie'
                end: '\\*\\/'
                endCaptures:
                    0:
                        name: 'punctuation.definition.comment.end.tie'
                name: 'comment.block.tie'
            }
            {
                match: '\\*/.*\\n'
                name: 'invalid.illegal.stray-comment-end.tie'
            }
            {
                captures:
                    1:
                        name: 'meta.toc-list.banner.line.tie'
                match: '^// =(\\s*.*?)\\s*=\\s*$\\n?'
                name: 'comment.line.banner.tie'
            }
            {
                begin: '(^[ \\t]+)?(?=//)'
                beginCaptures:
                    1:
                        name: 'punctuation.whitespace.comment.leading.tie'
                end: '(?!\\G)'
                patterns: [
                    {
                        begin: '//'
                        beginCaptures:
                            0:
                                name: 'punctuation.definition.comment.tie'
                        end: '\\n'
                        name: 'comment.line.double-slash.tie'
                        patterns: [
                            {
                                include: '#line_continuation_character'
                            }
                        ]
                    }
                ]
            }
        ]
    line_continuation_character:
        patterns: [
            {
                match: '(\\\\)\\s*\\n'
                captures:
                    1:
                        name: 'constant.character.escape.line-continuation.tie'
            }
        ]
